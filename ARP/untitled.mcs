local function tableMax(cRot, delay, atp)
    local tab = {}
    for f,flight in ipairs(cRot) do
        if flight.date<3 then
            table.insert(tab, {index=f, ctime=math.max(0, flight.gtime - math.ceil(2 / 3 * airports[flight.port2].turn[atp]) } )
        end 
    end 
    table.sort(tab, function(a,b) return a.ctime>b.ctime end)
    local cut = {}
    for i=1,#tab do
        if delay<=0 then break end 
        table.insert(cut, tab[i].index)
        if tab[i].ctime>=delay then
            
        else
        
        end 
    end 

    local max,maxV = 0, 0
    if key then 
        for i=1,#tab do
            if tab[i][key]>maxV then
                max, maxV = i, tab[i][key]
            end     
        end 
    else
        for i=1,#tab do
            if tab[i]>maxV then
                max, maxV = i, tab[i]
            end     
        end 
    end 
    return max    
end 


function MakeInitialRoutes()
    for c,craft in pairs(aircrafts) do --#crafts do
        if craft.dis then
            local route = {}
            for f,flight in ipairs(craft.rot) do
                if flight.date<3 then
                    break
                else
                    
                end 
            end 
        elseif #craft.rot>0 and craft.rot[1].date<3 then
            table.insert(routes, DeepCopy(craft.rot))
        end 
    
    
    
    
    
    
        for i,ir in ipairs(fSet[c].order) do
            for j,jr in ipairs(fSet[c].adj[ir]) do
               label_extend(fSet[c][ir], fSet[c][jr], craft, jr)
            end
        end
        
        for i,label in ipairs(fSet[c][#fSet[c]].labels) do
            if #label>2 then 
                local route = {cost=label.cost, craft=crafts[c].id,cut1=label.cut1,cut2=label.cut2,cuts=label.cuts}
                for i=2,#label-1 do 
                    table.insert(route, fSet[c][label[i]])
                end 
                table.insert(routes, route)
            end 
        end
   
        for i=1,#fSet[c] do
            fSet[c][i].labels = {}
        end 
        if output then  
            print('finish', c)
        end 
    end 
end 