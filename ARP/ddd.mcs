function label_extend(flight1, flight2, craft, index)
    --every flight has a label set, include a set of labels <totalcost, delay time>, which has no dominance
    --from the start airport to base airport?
    for _, label in ipairs(flight1.labels) do
        for t=1,3 do
            local tag = {cut1=label.cut1,cut2=label.cut2, cuts=DeepCopy(label.cuts)}  --cost=label.cost}--,  --cut=label.cut, cuts=DeepCopy(label.cuts), delay=label.delay,}
            if flight2.port2 then  --如果flight2不是终点
                local qcut = 0
                if t==1 then 
                    tag.delay = math.max(0, flight1.time2 + label.delay + flight1.gtime - flight2.time1)
                elseif label.delay+flight1.time2+flight1.gtime>flight2.time1 then
                    if t==2 then
                        if flight1.gtime>airports[flight1.port2].turn[craft.atp] then  ----for the gtime < airports[flight1.port2].turn[craft.atp] situation
                            tag.delay = math.max(0, flight1.time2 + label.delay + airports[flight1.port2].turn[craft.atp] - flight2.time1)
                        else
                            goto continue
                        end 
                    elseif t==3 then
                        --if flight1.gtime>math.ceil(airports[flight1.port2].turn[craft.atp]*2/3) then    ---there are two situations,one all cut2 has been cutted, or part of   ignore gtime<min turntime
                        if flight1.gtime>airports[flight1.port2].turn[craft.atp] then    ---there are two situations,one all cut2 has been cutted, or part of
                            tag.delay = math.max(0, flight1.time2 + label.delay + math.ceil(airports[flight1.port2].turn[craft.atp]*2/3) - flight2.time1)
                            qcut = tag.delay>0 and math.floor(airports[flight1.port2].turn[craft.atp]*1/3) --or airports[flight1.port2].turn[craft.atp] - flight2.time1 + flight1.time2 + label.delay
                        else 
                            break
                        end 
                    end 
                    if flight1.date==1 then 
                        tag.cut1 = tag.cut1 + 1
                    elseif flight1.date==2 then  
                        tag.cut2 = tag.cut2 + 1
                    end 
                    tag.cuts[#label-1] = qcut 
                else 
                    break
                end 
                
                --这个delay是当前航班的delay，之前航班的delay成本已经计算进去了
                if tag.delay>1440 then break end
                if flight2.time2+tag.delay+math.ceil(airports[flight2.port2].turn[craft.atp]*2/3)>craft.dayN then break end
                ----机场关闭约束
                if airports[flight2.port1].tw and (not time_check_airport(airports[flight2.port1], flight2.time1+tag.delay)) then 
                    break
                end
                if airports[flight2.port2].tw and (not time_check_airport(airports[flight2.port2], flight2.time2+tag.delay)) then
                    break
                end 
                --add the delay cost and aircraft change cost
                tag.cost = label.cost + flight_delay_cost(flight2, tag.delay) + craft_swap_cost(flight2, craft) + qcut * 20   ---flight2.dual     
                if flight1.date<flight2.date then 
                    if flight1.port2~=craft.base[1] then
                        tag.cost = tag.cost + 2000
                    end 
                end 
            else
                tag = {cost=label.cost, delay=label.delay, cut1=label.cut1, cuts=DeepCopy(label.cuts)}
                if tag.delay+flight1.time2+flight1.gtime>craft.dayN then
                    if tag.delay+flight1.time2+math.ceil(airports[flight1.port2].turn[craft.atp]*2/3)<=craft.dayN then 
                        if flight1.date==1 then 
                            tag.cut1 = tag.cut1 + 1
                        elseif flight2.date==2 then
                            tag.cut1 = tag.cut1 + 1
                        end 
                        local qcut = math.max(0, flight1.time2+tag.delay+airports[flight1.port2].turn[craft.atp]-craft.dayN)
                        tag.cost = tag.cost + qcut * 20 
                        table.insert(tag.cuts, qcut)
                    else
                        goto continue
                    end 
                end 
            end 
            
            for i=1,#label do
                table.insert(tag, label[i])
            end 
            table.insert(tag, index)
            
            --if not flight2.port2 then 
                local dominated 
                for i,ir in ipairs(flight2.labels) do
                    if Dominated(ir, tag) then 
                        dominated = true
                        break
                    end 
                end 
                if not dominated then 
                    local i = 1
                    while i<=#flight2.labels do
                        if Dominated(tag, flight2.labels[i]) then 
                            table.remove(flight2.labels, i)
                            i = i - 1
                        end 
                        i = i + 1
                    end 
                end 
--                while true do 
--                    if i>#flight2.labels then break end 
--                    if Dominated(flight2.labels[i], tag) then 
--                        tag = nil
--                        break
--                    elseif Dominated(tag, flight2.labels[i]) then 
--                        table.remove(flight2.labels, i)
--                        i = i - 1
--                    end 
--                    i = i + 1
--                end 
            --end 
            table.insert(flight2.labels, tag)
            if tag and tag.delay==0 or not flight2.port2 then break end 
            ::continue::
        end 
    end