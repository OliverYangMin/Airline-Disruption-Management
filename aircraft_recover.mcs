require '01Class.Flight'
require '01Class.Aircraft'
require '01Class.Airport'
require '01Class.Delta'
require '01Class.Route'
--require '01Class.Label'
require '02Module.stdlib'
require '02Module.GetData'  --load the data get: flights, airports, aircrafts and nodes, crafts
PORT1               = 57
CTIME1              = 480
OTIME1              = 600

Label = {}
Label.__index = Label

function Label:new(tab)
    local self = tab or {0; cost = 0, delay = 0, cut = 0, cuts = {}}
    setmetatable(self, Label)
    return self
end 

function Label:newDelay(flight1, flight2, gtime)
    return math.max(0, flight1.time2 + self.delay + gtime - flight2.time1)
end

function Label:dominate(label)
    if #self == #label then 
        for i=2,#self-1 do
            if self[i] ~= label[i] then 
                return false
            end 
        end 
        return self.cost <= label.cost  and self.cut <= label.cut 
    end 
end 

function Label:extend(id, craft)
    local flight1, flight2 = flights[self[#self]], flights[id]
    
    if id > 0 then 
        for t=1,3 do 
            local tab = {unpack(self)}
            tab[#tab+1] = id
            tab.cut, tab.cuts = self.cut, DeepCopy(self.cuts)
            local tag = Label:new(tab) --{unpack(self), index; cut = self.cut, cuts = DeepCopy(self.cuts)}  
            local cut2 = 0
            if t == 1 then 
                tag.delay = self:newDelay(flight1, flight2, flight1.gtime)
            elseif self.delay + flight1.time2 + flight1.gtime > flight2.time1 then
                if t==2 then
                    if flight1.gtime > airports[flight1.port2].turn[craft.atp] then  
                        tag.delay = self:newDelay(flight1, flight2, airports[flight1.port2].turn[craft.atp])
                    else
                        goto continue
                    end 
                elseif t==3 then
                    if flight1.gtime > math.ceil(airports[flight1.port2].turn[craft.atp] * 2 / 3) then  
                        tag.delay = self:newDelay(flight1, flight2, math.ceil(airports[flight1.port2].turn[craft.atp] * 2 / 3))
                        cut2 = math.min(math.floor(airports[flight1.port2].turn[craft.atp] / 3), airports[flight1.port2].turn[craft.atp] - flight2.time1 + flight1.time2 + self.delay)
                    else 
                        break
                    end 
                end 
                tag.cut = tag.cut + 1
                tag.cuts[#self-1] = cut2
            else 
                break
            end 
            

            if tag.delay > 1440 or not delta:checkAirport(flight2, tag.delay) then 
                break 
            end 

            tag.cost = self.cost + delta:flightDelay(flight2, tag.delay) + delta:swapCraft(flight2, craft) + cut2 * 20   --- -flight2.dual    
            
            for i=#flight2.labels,1,-1 do
                if flight2.labels[i]:dominate(tag) then
                    break 
                elseif tag:dominate(flight2.labels[i]) then
                    table.remove(flight2.labels, i)
                end 
            end 
            
            flight2.labels[#flight2.labels+1] = tag
            if tag.delay == 0 then 
                break 
            end 
            ::continue::
        end 
    else
        local tab = {unpack(self)}
        tab[#tab+1] = id
        tab.cut, tab.cuts, tab.cost,tab.delay = self.cut, DeepCopy(self.cuts), self.cost ,self.delay
        local tag = Label:new(tab)--{unpack(self), cost = self.cost, delay = self.delay, cut = self.cut, cuts = DeepCopy(self.cuts)}
--        if tag.delay + flight1.time2 + flight1.gtime > craft.day2 then
--            tag.cut = tag.cut + 1
--            local cut2 = math.max(0, flight1.time2 + tag.delay + airports[flight1.port2].turn[craft.atp] - craft.day2)
--            tag.cost = tag.cost + cut2 * 20 
--            table.insert(tag.cuts, cut2)
--        end 
        table.insert(flights[id].labels, tag)
    end 
end 

function Label:to_route(craft)
    local route = Route:new(craft)
    for i=2,#self do
        route:append(self[i])
    end 
    
    route.cost = self.cost - craft.dual 
    for i=1,#route do
        route.cost = route.cost - flights[route[i]].dual
    end 
    return route
end 

Master = {}
Master.__index = Master

local function resetCoeff(cSize, value)
    local coeff = {}
    for i=1,cSize do
        coeff[i] = value or 0
    end 
    return coeff
end 

function Master:new(cRoutes)
    local self = {obj = {}, routes = cRoutes}
    setmetatable(self, Master)
    self.lp = CreateLP()
    self:buildModel()
    return self
end 

function Master:buildModel()
    ---the cost of flights being canceled
    for i=1,#flights do
        if flights[i].dis then
            table.insert(self.obj, (P[1] + (P[6] - 1.5) * flights[i].old.pas - P[2] - 120 * P[5]) * flights[i].wt)   
        else
            table.insert(self.obj, (P[1] + P[6] * flights[i].old.pas) * flights[i].wt)   ---passenger cancel cost may be reduced
        end 
    end 
    
    ---the cost for every route has been found
    for i=1,#self.routes do
        table.insert(self.obj, self.routes[i].cost)
    end 
    SetObjFunction(master, obj, 'min')
    
    ---constraint 1 every flight been execute by only one route or be canceled
    for i=1,#nodes do
        local coeff = resetCoeff(#self.obj)
        coeff[i] = 1
        for j=1,#routes do
            if routes[j]:isIn(flights[i]) then 
                coeff[#flights + j] = 1
            end 
        end 
        AddConstraint(master, coeff, '=', 1)
    end
    
    for i=1,#aircrafts do
        coeff = resetCoeff(#self.obj)
        for j=1,#routes do 
            if routes[j].craft == aircrafts[i].id then 
                coeff[#flights+j] = 1
            end 
        end 
        AddConstraint(master, coeff, '<=', 1)
    end 
    
    --for i=1,4 do                 ---if the flight in day 1,2,3,4
    local coeff = resetCoeff(#self.obj)
    for j=1,#routes do
        coeff[#flights + j] = routes[j].cut
    end 
    AddConstraint(master, coeff, '<=', math.floor(0.05 * dayFlights[i]))
        
--        coeff = resetCoeff(#self.obj)
--        for j=1,#flights do
--            coeff[j] = 1
--        end 
--        AddConstraint(master, coeff, '<=', math.floor(0.1 * dayFlights[i]))
    --end 
    
    ---every aircraft only execute no more than one route

end 

function Master:solve(isInteger)
    if isInteger then
        for i=1,#obj do
            SetBinary(master, i)
        end
    else
        for i=1,#obj do
            coeff = resetCoeff(#self.obj)
            coeff[i] = 1
            AddConstraint(master, coeff, '<=', 1)
        end 
    end
    WriteLP(master, "master.mps")
    os.remove("master_solution.sol")--clear the results
    os.execute("cplex.exe -c \"read master.mps\" \"opt\" \"write master_solution.sol\" \"quit\"")
end 

function Master:getResult()
    local i,j = 1,1
    self.var = {}
    local inputf = io.open("master_solution.sol")
    self.obj = nil
    self.duals = {}
    for line in inputf:lines() do
        if not obj then
            obj = string.match(line, "objectiveValue=\"([-%d%.]+)\"")
        end
        if not self.duals[i] then
            self.duals[i] = string.match(line, "constraint.+dual=\"([-%d%.]+)\"")
            if self.duals[i] then
                self.duals[i] = tonumber(self.duals[i])
                i = i + 1
            end
        end 
        if not self.var[j] then
            self.var[j] = string.match(line, "variable.+value=\"([-%d%.]+)\"")
            if self.var[j] then
                j = j + 1
            end
        end
    end
    --local base_cost = 54567
    --print('obj:',obj + base_cost)             ---@@@@@@@@@@@@@@@@@@@
    inputf:close()
    
--    for i=1,#nodes do
--        if var[i]=='1' then 
--            print('flight',nodes[i].info.ID, 'be canceled cost',(1800 + 6 * nodes[i].old.pas) * nodes[i].wt)
--        end     
--    end 
    --return true
end 

--function Master:setDuals()
--    for f,flight in ipairs(flights) do
--        flight.dual = self.duals[f]
--    end 
--    for c,craft in pairs(aircrafts) do
--        craft.dual = self.duals[#flights+c]
--    end 
--    cut_price = self.duals[#self.duals]
--end 

--function Master:solveSubproblem()
--    local routes = {}
--    for c,craft in pairs(aircrafts) do
--        local route = craft:findRoute()
--        if route.cost < -0.1 then 
--            routes[#routes+1] = route
--        end
--    end 
--    return routes 
--end 
function main()
    require 'mobdebug'.off()
    
    read_data() 
    -- load data: flights, airports and aircrafts
    local starttime = os.clock()
    delta = Delta:new()
    
    for _,craft in pairs(aircrafts) do
        craft:buildGraph()
    end
    -- build flights toposorted graph for every unique aircraft 
    
    routes_pool = {}
    for _,craft in pairs(aircrafts) do
        if not craft.dis then
            table.insert(routes_pool, craft.rot)
        end 
    end 
    -- get initial routes, put into routes_pool
    require 'mobdebug'.on()

    local iter, master = 0
    repeat
        iter = iter + 1
        master = Master:new(routes_pool)
        if master:solve() ~= 0 then 
            error('some problem')
        end 
        master:setDuals()
        local routes = master:solveSubproblem()
        for i=1,#routes do
            routes_pool[#routes_pool+1] = routes[i]
        end 
    until not routes[1]
    -- solve the problem

    
    print(os.clock() - starttime)
end 

main()